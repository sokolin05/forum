import config
import disnake
import datetime
from disnake.ext import commands
from decorator import guild
import tracemalloc
import sqlite3
from cogs.solved import SolvedButton

intents = disnake.Intents.default()
intents.messages = True
intents.guilds = True
intents.members = True
tracemalloc.start()

class AmnestyButton(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        
    @disnake.ui.button(label="–ê–º–Ω–∏—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É", style=disnake.ButtonStyle.grey, custom_id="amnesty", disabled=False)
    async def amnesty(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        
        with sqlite3.connect("./locale/database.db") as db:
            cursor = db.cursor()
            bans = cursor.execute(""" SELECT moder, reason, proofs, date FROM bans WHERE id = ? """, [inter.author.id]).fetchone()
            amnesty = cursor.execute(""" DELETE FROM sqlite_sequence WHERE name='amnesty'; """)
            db.commit()
        
        if bans:
            moder, reason, proofs, date = bans[0], bans[1], bans[2], bans[3]
            moder = inter.guild.get_member(moder)
        else:
            await inter.send("–£ –≤–∞—Å –Ω–µ—Ç –±–∞–Ω–∞!", ephemeral=True)
            return

        embed = disnake.Embed(
            title=f"ABF-{moder.display_name.upper()}", 
            description="–í—ã —Å–æ–∑–¥–∞–ª–∏ –≤–µ—Ç–∫—É –¥–ª—è –∞–º–Ω–∏—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—à–µ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –í —ç—Ç–æ–π –≤–µ—Ç–∫–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –µ—ë, –µ—Å–ª–∏ –ø–æ–ª—É—á–∏—Ç—å—Å—è üòâ",
            color=config.Colors.TRANSPARENT
        )
        embed.add_field(name="–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–π:", value=f"{inter.author.mention} (@{inter.author.display_name})")
        embed.add_field(name="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –±–∞–Ω–∞:", value='<t:'+date+':f>' if date else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        embed.add_field(name="–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –±–∞–Ω–∞:", value=f"{moder.mention} (@{moder.display_name})", inline=False)
        embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞ –±–∞–Ω–∞:", value=reason if reason else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', inline=False)
        if proofs:
            embed.set_image(url=proofs)
        thread = await inter.channel.create_thread(name=f"af-{moder.display_name.lower()}", type=disnake.ChannelType.private_thread, invitable=False, slowmode_delay=30)
        await thread.add_user(inter.author)
        await thread.add_user(moder)        
        message = await thread.send(embed=embed, view=SolvedButton())
        await message.pin()
        await inter.send(f"–í–µ—Ç–∫–∞ –¥–ª—è –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è –±–∞–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞ {thread.jump_url} (#{thread.name})!", ephemeral=True)

class Bans(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(name=disnake.Localized("amnesty", key="AMNESTY_NAME"), description=disnake.Localized("The ban amnesty panel.", key="AMNESTY_DESCRIPTION"), default_member_permissions=disnake.Permissions(ban_members=True), guild_ids=[config.Guilds.MAIN])
    async def amnesty(self, inter):
        embed = disnake.Embed(
            title="–ê–ú–ù–ò–°–¢–ò–Ø", 
            description="–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç —É –≤–∞—Å –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤ —ç—Ç–æ–º –¥–∏—Å–∫–æ—Ä–¥ —Å–µ—Ä–≤–µ—Ä–µ. –ß—Ç–æ–±—ã –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –±–∞–Ω, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ç–∫–∏.\n\n–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Å–Ω—è—Ç–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —ç—Ç–æ–º –¥–∏—Å–∫–æ—Ä–¥ —Å–µ—Ä–≤–µ—Ä–µ. –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ –Ω–∞ —é—Ç—É–±, —Ñ–æ—Ç–æ –º–æ–∂–Ω–æ –Ω–∞–ø—Ä—è–º—É—é –≤ –¥–∏—Å–∫–æ—Ä–¥.",
            color=config.Colors.TRANSPARENT
        )
        embed.set_image(file=disnake.File("./image/amnesty.png", filename="amnesty.png"))
        await inter.send(embed=embed, view=AmnestyButton())

    @commands.slash_command(name=disnake.Localized("ban", key="BAN_NAME"), description=disnake.Localized("Issue a ban to the user.", key="BAN_DESCRIPTION"), default_member_permissions=disnake.Permissions(ban_members=True), guild_ids=[config.Guilds.MAIN])
    async def ban_slash(self, inter: disnake.GuildCommandInteraction, 
                        member: disnake.Member = commands.Param(name=disnake.Localized("member", key="BAN_MEMBER_NAME"), description=disnake.Localized("The user who needs to be banned.", key="BAN_MEMBER_DESCRIPTION")),
                        reason: str = commands.Param(name=disnake.Localized("reason", key="BAN_REASON_NAME")),
                        image: disnake.Attachment = commands.Param(name=disnake.Localized("proofs", key="BAN_IMAGE_NAME"), description=disnake.Localized("Evidence of violation of the rules by the user.", key="BAN_IMAGE_DESCRIPTION"))
    ):
        await inter.response.defer(ephemeral=True)
        await Banned(member, reason, image, True).ban(inter)



    @commands.slash_command(name=disnake.Localized("unban", key="UNBAN_NAME"), description=disnake.Localized("Remove the user's ban.", key="UNBAN_DESCRIPTION"), default_member_permissions=disnake.Permissions(ban_members=True), guild_ids=[config.Guilds.MAIN])
    async def unban_slash(self, inter: disnake.GuildCommandInteraction,
                          member: disnake.Member = commands.Param(name=disnake.Localized("member", key="UNBAN_MEMBER_NAME"), description=disnake.Localized("The user who needs to be banned.", key="UNBAN_MEMBER_DESCRIPTION"))
    ):
        await inter.response.defer(ephemeral=True)
        await UnBanned(member).unban(inter)



class UnBanned:
    def __init__(self, member=None):
        self.member = member

    async def unban(self, inter: disnake.ApplicationCommandInteraction):
        role_ban = inter.guild.get_role(config.Roles.BAN)
        if role_ban not in self.member.roles:
            await inter.send(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.member.mention} –Ω–µ –∏–º–µ–µ—Ç—Å—è –±–∞–Ω–∞!", ephemeral=True)
            return False
        try:
            await self.member.remove_roles(role_ban)
        except:
            await inter.send(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.member.mention} —Ä–æ–ª—å –≤—ã—à–µ –≤–∞—à–µ–π!", ephemeral=True)
            return False
        
        with sqlite3.connect("./locale/database.db") as db:
            cursor = db.cursor()
            cursor.execute(""" DELETE FROM bans WHERE id = ? """, [self.member.id])
            db.commit()

        channel_logs = inter.guild.get_channel(config.Channels.LOGS)
        await channel_logs.send(embed=disnake.Embed(description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.member.mention} (@{self.member.display_name}) —Å–Ω—è—Ç –±–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {inter.author.mention} (@{inter.author.display_name}).", color=config.Colors.TRANSPARENT))
        channel_warn = inter.guild.get_channel(config.Channels.WARNINGS)
        await channel_warn.send(f"{self.member.mention} (@{self.member.display_name}), —É –≤–∞—Å –∞–º–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –±–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {inter.author.mention} (@{inter.author.display_name}).")
        await inter.send(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.member.mention} (@{self.member.display_name}) —Å–Ω—è—Ç –±–∞–Ω!", ephemeral=True)

class Banned:
    def __init__(self, member=None, reason=None, image=None, delete=True):
        self.member = member
        self.reason = reason
        self.image = image
        self.delete = delete

    async def ban(self, inter: disnake.ApplicationCommandInteraction):
        role_ban = inter.guild.get_role(config.Roles.BAN)
        if role_ban in self.member.roles:
            await inter.send(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.member.mention} —É–∂–µ –∏–º–µ–µ—Ç—Å—è –±–∞–Ω!", ephemeral=True)
            return False
        if self.image != None:
            if not self.image.content_type.startswith('image/'):
                await inter.send(f"–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º!", ephemeral=True)
                return False
        try:
            for roles in self.member.roles:
                if roles.is_assignable():
                    await self.member.remove_roles(roles)
            await self.member.add_roles(role_ban)
        except:
            await inter.send(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.member.mention} —Ä–æ–ª—å –≤—ã—à–µ –≤–∞—à–µ–π!", ephemeral=True)
            return False
        three_days_ago = datetime.datetime.now()-datetime.timedelta(days=3)
        deleted = 0
        if self.delete:
            for channel in inter.guild.text_channels:
                async for message in channel.history(after=three_days_ago):
                    if message.author == self.member:
                        await message.delete()
                        deleted += 1
        
        with sqlite3.connect("./locale/database.db") as db:
            cursor = db.cursor()
            cursor.execute(""" INSERT INTO bans (id, moder, reason, proofs) VALUES (?, ?, ?, ?) """, [self.member.id, inter.author.id, self.reason, self.image.url])
            cursor.execute(""" INSERT INTO moders (id, bans) VALUES (?, 1) ON CONFLICT(id) DO UPDATE SET bans = COALESCE(bans, 0) + 1 """, [inter.author.id])
            db.commit()

        channel_logs = inter.guild.get_channel(config.Channels.LOGS)
        await channel_logs.send(embed=disnake.Embed(description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.member.mention} (@{self.member.display_name}) –≤—ã–¥–∞–Ω –±–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {inter.author.mention} (@{inter.author.display_name}), –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {self.reason.lower()}.", color=config.Colors.TRANSPARENT))
        channel_warn = inter.guild.get_channel(config.Channels.WARNINGS)
        await channel_warn.send(f"{self.member.mention} (@{self.member.display_name}), –≤–∞–º –≤—ã–¥–∞–Ω –±–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {inter.author.mention} (@{inter.author.display_name}), –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {self.reason.lower()}.")
        await inter.send(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.member.mention} (@{self.member.display_name}) –≤—ã–¥–∞–Ω –±–∞–Ω{' –∏ —É–¥–∞–ª–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: '+str(deleted) if self.delete else ''}!", ephemeral=True)

def setup(bot):
    bot.add_cog(Bans(bot))

import config
import disnake
from disnake.ext import commands

class Clear(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    intents = disnake.Intents.default()
    intents.message_content = True

    @commands.slash_command(
        name=disnake.Localized("cleaning", key="CLEAR_NAME"), 
        description=disnake.Localized("Cleaning chat messages.", key="CLEAR_DESCRIPTION"), 
        default_member_permissions=disnake.Permissions(manage_guild=True), 
        guild_ids=[config.Guilds.MAIN]
    )
    async def clear(
        self,
        inter, 
        amount: int = commands.Param(
            name=disnake.Localized("amount", key="CLEAR_AMOUNT_NAME"),
            description=disnake.Localized("The number of messages to delete.", key="CLEAR_AMOUNT_DESCRIPTION")
        )
    ):
        # if not amount in range(1, 50):
        #     await inter.response.send_message(f"–ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 50!", ephemeral=True)
        #     return
        
        deleted_messages = await inter.channel.purge(limit=amount)
        embed = disnake.Embed(description=f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {inter.author.mention} (@{inter.author.display_name}) —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–π: ` {len(deleted_messages)} `, –≤ –∫–∞–Ω–∞–ª–µ {inter.channel.mention} (#{inter.channel.name}). –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n", color=config.Colors.TRANSPARENT)
        for message in deleted_messages:
            escaped_content = message.content.replace('`', '\\`')
            embed.description += f"```- {message.author.mention} (@{message.author.display_name}): {escaped_content}```"
        channel_logs = inter.guild.get_channel(config.Channels.LOGS)
        log_message = await channel_logs.send(embed=embed)
        
        await inter.send(f"–£–¥–∞–ª–µ–Ω–æ [—Å–æ–æ–±—â–µ–Ω–∏–π]({log_message.jump_url}): {len(deleted_messages)}!", ephemeral=True)

def setup(bot):
    bot.add_cog(Clear(bot))

import config
import disnake
from disnake.ext import commands
from decorator import guild_m
import asyncio
import datetime
import sqlite3
from cogs.solved import SolvedButton
from cogs.joins import JoinsButton
from cogs.bans import AmnestyButton



intents = disnake.Intents.default()
intents.guilds = True
intents.message_content = True



class Events(commands.Cog):
    def __init__(self, bot=commands.Bot):
        self.bot = bot
  
    @commands.Cog.listener()
    async def on_ready(self):
        self.bot.add_view(SolvedButton())
        self.bot.add_view(AmnestyButton())
        while True:
            await self.bot.change_presence(activity=disnake.Activity(type=disnake.ActivityType.watching, name=f"–∑–∞ {len(self.bot.guilds)} —Å–µ—Ä–≤–µ—Ä–∞–º–∏!"), status=disnake.Status.idle)
            await asyncio.sleep(15)
            users = set()
            for guild in self.bot.guilds:
                for member in guild.members:
                    users.add(member.id)
            await self.bot.change_presence(activity=disnake.Activity(type=disnake.ActivityType.watching, name=f"–∑–∞ {len(users)} –∏–≥—Ä–æ–∫–∞–º–∏!"), status=disnake.Status.idle)
            await asyncio.sleep(15)


        
    # @commands.Cog.listener()
    # async def on_slash_command_error(self, inter: disnake.ApplicationCommandInteraction, error: commands.CommandError):
    #     print(error)
    #     if isinstance(error, commands.MissingRequiredArgument):
    #         await inter.send(f"–û—à–∏–±–∫–∞: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞ `{error.param.name}`.", ephemeral=True)
    #     elif isinstance(error, commands.CommandNotFound):
    #         await inter.send("–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
    #     elif isinstance(error, commands.CommandOnCooldown):
    #         await inter.send(f"–ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {round(error.retry_after, 2)} —Å–µ–∫—É–Ω–¥.", ephemeral=True)
    #     else:
    #         await inter.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –°–æ–æ–±—â–∏—Ç–µ –≤ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ –ü—Ä–æ–≤–∏–Ω—Ü–∏–∏ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞!", ephemeral=True)
            
    #     channel_logs = self.bot.get_channel(config.Channels.ERRORS)
    #     if channel_logs:
    #         await channel_logs.send(f"<@527827158605758484>, –æ—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã `/{inter.data.name}` –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ `{inter.guild.name}` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {inter.author.mention}:```{error}```")



    @commands.Cog.listener()
    @guild_m
    async def on_message(self, message):
        if message.guild.id != config.Guilds.MAIN:
            return
        for id in config.Channels.NEWS:
            if message.channel.id == id:
                date = message.created_at+datetime.timedelta(hours=3)
                time_message = datetime.datetime.time(date).strftime("%H:%M")
                date_message = datetime.datetime.date(date).strftime("%d.%m.%Y")
                await message.create_thread(name=f"–û–±—Å—É–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç {date_message} ({time_message})", slowmode_delay=30)
        for id in config.Channels.NEWS_PUBLISH:
            if message.channel.id == id:
                await message.publish()
        


    @commands.Cog.listener("on_thread_create")
    async def thread_create_detect(self, forum_create: disnake.Thread):
        for forum in config.Channels.FORUM:
            if forum_create.parent.id != forum["id"]:
                return
            def check(message):
                return message.thread == forum_create and message.author == forum_create.owner
            
            try:
                await self.bot.wait_for("message", check=check, timeout=300)
            except asyncio.TimeoutError:
                return 
            embed = disnake.Embed(
                title=forum_create.parent.name.upper(),
                description=forum["label"],
                color=config.Colors.TRANSPARENT
            )
            bot_message = await forum_create.send(embed=embed, view=SolvedButton())
            await bot_message.pin()
        


    @commands.Cog.listener("on_member_join")
    async def member_join_detect(self, member: disnake.Member):
    # @commands.slash_command(name="t", guild_id=config.Guilds.MAIN)
    # async def member_join_detect(self, inter: disnake.ApplicationCommandInteraction, member: disnake.Member):
        if member.guild.id != config.Guilds.MAIN:
            return
        
        channel_tech = member.guild.get_channel(config.Channels.VERIFY_TECH)
        # channel_tech = inter

        user = await self.bot.fetch_user(member.id)
        
        created_time_f = disnake.utils.format_dt(user.created_at, style="f")
        created_time_R = disnake.utils.format_dt(user.created_at, style="R")
        
        embed = disnake.Embed(
            title="",
            description=f"**–£—á–∞—Å—Ç–Ω–∏–∫:** {member.mention}\n"
                        f"**–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** {member.name} ({member.display_name})\n"
                        f"**–°—Ç–∞—Ç—É—Å:** {next((activity for activity in member.activities if isinstance(activity, disnake.CustomActivity)), '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
                        f"**–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:** {created_time_f} {created_time_R}\n",
            color=config.Colors.TRANSPARENT
        )
        if member.avatar:
            embed.set_thumbnail(url=member.avatar.url)
        if user.banner:
            embed.set_image(url=user.banner.url)
        await channel_tech.send(embed=embed, view=JoinsButton(member, user))



    @commands.Cog.listener("on_guild_join")
    async def guild_join_detect(self, guild: disnake.Guild):
        guild_main = self.bot.get_guild(config.Guilds.MAIN)
        channel_moder = guild_main.get_channel(config.Channels.MODERS)
        if not channel_moder:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
            return
        webhook = await channel_moder.create_webhook(
            name=guild.name,
            avatar=await guild.icon.read() if guild.icon else None,
            reason=f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {guild.name}\n"
        )
        embed = disnake.Embed(
            title="",
            description=f"**–ë–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä:** {guild.name}\n**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {guild.member_count}",
            color=config.Colors.TRANSPARENT
        )
        # embed.set_thumbnail(url=guild.icon.url if guild.icon else None)
        await webhook.send(
            embed=embed,
            username=guild.name,
            avatar_url=guild.icon.url if guild.icon else None
        )
        await webhook.delete()



    @commands.Cog.listener("on_guild_remove")
    async def guild_remove_detect(self, guild: disnake.Guild):
        guild_main = self.bot.get_guild(config.Guilds.MAIN)
        channel_moder = guild_main.get_channel(config.Channels.MODERS)
        if not channel_moder:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
            return
        webhook = await channel_moder.create_webhook(
            name=guild.name,
            avatar=await guild.icon.read() if guild.icon else None,
            reason=f"–ë–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞: {guild.name}\n"
        )
        embed = disnake.Embed(
            title="",
            description=f"**–ë–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞:** {guild.name}",
            color=config.Colors.TRANSPARENT
        )
        # embed.set_thumbnail(url=guild.icon.url if guild.icon else None)
        await webhook.send(
            embed=embed,
            username=guild.name,
            avatar_url=guild.icon.url if guild.icon else None
        )
        await webhook.delete()
      


def setup(bot):
    bot.add_cog(Events(bot))

import config
import disnake
import sqlite3
import asyncio
import datetime
from disnake.ext import commands
from decorator import guild_m
from cogs.bans import Banned



class Joins(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
    
    pass



class JoinsButton(disnake.ui.View):
    def __init__(self, member: disnake.Member, user: disnake.User): 
        super().__init__(timeout=None)
        self.moder_id = None
        self.member = member 

        if member.activity:
            status_button = disnake.ui.Button(label="–°—Ç–∞—Ç—É—Å", style=disnake.ButtonStyle.grey, custom_id="status", row=1)
            status_button.callback = self.status
            self.add_item(status_button)
        if member.avatar:
            avatar_button = disnake.ui.Button(label="–ê–≤–∞—Ç–∞—Ä–∫–∞", style=disnake.ButtonStyle.grey, custom_id="avatar", row=1)
            avatar_button.callback = self.avatar
            self.add_item(avatar_button)
        if user.banner:
            banner_button = disnake.ui.Button(label="–ë–∞–Ω–Ω–µ—Ä", style=disnake.ButtonStyle.grey, custom_id="banner", row=1)
            banner_button.callback = self.banner
            self.add_item(banner_button)

    global moder_id
    moder_id = None
        
    @disnake.ui.button(label="–û–±—Ä–∞–±–æ—Ç–∞—Ç—å", style=disnake.ButtonStyle.blurple, custom_id="processing", row=0)
    async def processing(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        with sqlite3.connect("./locale/database.db") as db:
            cursor = db.cursor()
            cursor.execute(""" 
                INSERT INTO moders (id, joins) 
                VALUES (?, 1) 
                ON CONFLICT(id) 
                DO UPDATE SET joins = COALESCE(joins, 0) + 1 
            """, [inter.author.id])
            db.commit()

        components = [
            disnake.ui.Button(label="–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ", style=disnake.ButtonStyle.grey, custom_id="success", disabled=True),
            disnake.ui.Button(label=f"–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º: {inter.author.display_name}", style=disnake.ButtonStyle.grey, custom_id="moder", disabled=True)
        ]
        await inter.response.edit_message(components=components)
        for i, component in enumerate(components):
            self.children.insert(i, component)
        channel_logs = inter.guild.get_channel(config.Channels.LOGS)
        await channel_logs.send(embed=disnake.Embed(description=f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {inter.author.mention} (@{inter.author.display_name}) –æ–±—Ä–∞–±–æ—Ç–∞–ª [–∑–∞—è–≤–∫—É]({inter.message.jump_url}) –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.member.mention} (@{self.member.display_name}).", color=config.Colors.TRANSPARENT))

    async def common_logic(self, inter: disnake.MessageInteraction):
        if self.moder_id is not None and self.moder_id != inter.author.id:
            await inter.response.send_message(f"–≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {inter.author.mention} (@{inter.author.display_name})!", ephemeral=True)
            return
        if self.moder_id is None:
            self.moder_id = inter.author.id
        for item in self.children:
            if item.custom_id == inter.component.custom_id or item.disabled:
                item.disabled = True
            else:
                item.disabled = False
            if item.custom_id in ["waiting", "moder", "ban"]:
                self.remove_item(item)

        for item in self.children.copy():
            if item.custom_id in ["waiting", "moder", "ban"]:
                self.remove_item(item)

        components = [
            disnake.ui.Button(label="–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", style=disnake.ButtonStyle.grey, custom_id="waiting", disabled=True, row=0),
            disnake.ui.Button(label=f"–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º: {inter.author.display_name}", style=disnake.ButtonStyle.grey, custom_id="moder", disabled=True, row=0),
            disnake.ui.Button(label="–ë–∞–Ω", style=disnake.ButtonStyle.danger, custom_id="ban", disabled=True, row=0)
        ]
        for component in components:
            self.add_item(component)
        components[2].callback = self.ban
        global moder_id
        moder_id = inter.author.id
        for item in self.children:
            if item.custom_id == "processing":
                item.disabled = True
        await inter.response.edit_message(view=self)
        await asyncio.sleep(30*60) # –ó–ê–î–ï–†–ñ–ö–ê
        for item in self.children:
            if item.custom_id in ["processing", "ban"]:
                item.disabled = False
            else:
                item.disabled = True
        await inter.edit_original_message(view=self)

    @disnake.ui.button(label="–ù–∏–∫", style=disnake.ButtonStyle.grey, custom_id="nick", row=1)
    async def nick(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        channel_warn = inter.guild.get_channel(config.Channels.WARNINGS)
        time = disnake.utils.format_dt(datetime.datetime.now()+datetime.timedelta(minutes=30), style="t")
        await channel_warn.send(config.Joins(self.member, inter.author, "–Ω–∏–∫–Ω–µ–π–º", time))
        await self.common_logic(inter)

    async def status(self, inter: disnake.MessageInteraction):
        channel_warn = inter.guild.get_channel(config.Channels.WARNINGS)
        time = disnake.utils.format_dt(datetime.datetime.now()+datetime.timedelta(minutes=30), style="t")
        await channel_warn.send(config.Joins(self.member, inter.author, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å", time))
        await self.common_logic(inter)

    async def avatar(self, inter: disnake.MessageInteraction):
        channel_warn = inter.guild.get_channel(config.Channels.WARNINGS)
        time = disnake.utils.format_dt(datetime.datetime.now()+datetime.timedelta(minutes=30), style="t")
        await channel_warn.send(config.Joins(self.member, inter.author, "–∞–≤–∞—Ç–∞—Ä–∫—É –ø—Ä–æ—Ñ–∏–ª—è", time))
        await self.common_logic(inter)

    async def banner(self, inter: disnake.MessageInteraction):
        channel_warn = inter.guild.get_channel(config.Channels.WARNINGS)
        time = disnake.utils.format_dt(datetime.datetime.now()+datetime.timedelta(minutes=30), style="t")
        await channel_warn.send(config.Joins(self.member, inter.author, "–±–∞–Ω–Ω–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è", time))
        await self.common_logic(inter)
        
    async def ban(self, inter: disnake.MessageInteraction):
        with sqlite3.connect("./locale/database.db") as db:
            cursor = db.cursor()
            cursor.execute(""" 
                INSERT INTO moders (id, joins) 
                VALUES (?, 1) 
                ON CONFLICT(id) 
                DO UPDATE SET joins = COALESCE(joins, 0) + 1 
            """, [inter.author.id])
            db.commit()

        components = [
            disnake.ui.Button(label="–ó–∞–±–∞–Ω–µ–Ω", style=disnake.ButtonStyle.grey, custom_id="success", disabled=True),
            disnake.ui.Button(label=f"–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º: {inter.author.display_name}", style=disnake.ButtonStyle.grey, custom_id="moder", disabled=True)
        ]
        await inter.response.edit_message(components=components)
        await Banned(self.member, "–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—å–±—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç —Å–º–µ–Ω—ã –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞—Ä—É—à–∞—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–∏—Å–∫–æ—Ä–¥-—Å–µ—Ä–≤–µ—Ä–∞", None, False).ban(inter)
        for i, component in enumerate(components):
            self.children.insert(i, component)
        channel_logs = inter.guild.get_channel(config.Channels.LOGS)
        await channel_logs.send(embed=disnake.Embed(description=f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {inter.author.mention} (@{inter.author.display_name}) –æ–±—Ä–∞–±–æ—Ç–∞–ª [–∑–∞—è–≤–∫—É]({inter.message.jump_url}) –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.member.mention} (@{self.member.display_name}).", color=config.Colors.TRANSPARENT))

def setup(bot):
    bot.add_cog(Joins(bot))

import config
import disnake
from disnake.ext import commands
import requests
import sqlite3



intents = disnake.Intents.default()
intents.guilds = True
intents.members = True



class Moders(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(
        name=disnake.Localized("statistics", key="STATS_NAME"),
        description=disnake.Localized("Moderator statistics.", key="STATS_DESCRIPTION"),
        default_member_permissions=disnake.Permissions(administrator=True),
        guild_ids=[config.Guilds.MAIN]
    )
    async def statistics(self, inter):
        
        with sqlite3.connect("./locale/database.db") as db:
            cursor = db.cursor()
            cursor.execute(""" SELECT id, verifications, bans, mutes, joins FROM moders """)
            rows = cursor.fetchall()
            db.commit()

        embed = disnake.Embed(
            title="–°–¢–ê–¢–ò–°–¢–ò–ö–ê",
            description="",
            color=config.Colors.TRANSPARENT
        )
        embed.add_field(
            name=f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:",
            value=f"` –ù–∏–∫–∏ `/` –ë–∞–Ω—ã `/` –ú—É—Ç—ã `/` –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è `",
            inline=False
        )
        for row in rows:
            moder, verifications, bans, mutes, joins = row
            moder = inter.guild.get_member(moder)
            if moder:
                roles = [config.Roles.DEVELOPER, config.Roles.CHIEF_MODERATOR, config.Roles.MODERATOR, config.Roles.MANAGER]
                if any(role in [r.id for r in moder.roles] for role in roles):
                    embed.add_field(
                        name=f"{moder.display_name}:",
                        value=f"` {verifications if verifications else 0} `/` {bans if bans else 0} `/` {mutes if mutes else 0} `/` {joins if joins else 0} `",
                        inline=False
                    )
        embed.set_image(file=disnake.File("./image/statistics.png", filename="statistics.png"))
        await inter.send(embed=embed)



    @commands.slash_command(
        name=disnake.Localized("servers", key="SERVERS_NAME"),
        description=disnake.Localized("The list of servers that have a bot.", key="SERVERS_DESCRIPTION"),
        default_member_permissions=disnake.Permissions(administrator=True),
        guild_ids=[config.Guilds.MAIN]
    )
    async def servers(self, inter):
        guilds = self.bot.guilds
        guild_per_page = 15
        pages = [guilds[i:i + guild_per_page] for i in range(0, len(guilds), guild_per_page)]
        embeds = []

        for i, page in enumerate(pages):
            embed = disnake.Embed(title=f"–°–ü–ò–°–û–ö –°–ï–†–í–ï–†–û–í ‚Äî {len(guilds)}", description="", color=config.Colors.TRANSPARENT)
            for guild in page:
                embed.description+=f"**{guild.name}:** {guild.member_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            embeds.append(embed)

        current_page = 0

        async def update_message(inter):
            view.previous_button.disabled = current_page == 0
            view.next_button.disabled = current_page == len(embeds) - 1
            view.page_number_button.label = f"{current_page + 1} –∏–∑ {len(embeds)}"
            await inter.response.edit_message(embed=embeds[current_page], view=view)

        class PaginationView(disnake.ui.View):
            def __init__(self, message, timeout):
                super().__init__(timeout=timeout)
                self.message = message
                self.previous_button.disabled = True
                self.next_button.disabled = len(guilds) <= guild_per_page

            @disnake.ui.button(label="‚¨ÖÔ∏è", style=disnake.ButtonStyle.gray)
            async def previous_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
                nonlocal current_page
                if current_page > 0:
                    current_page -= 1
                    await update_message(inter)

            @disnake.ui.button(label="", style=disnake.ButtonStyle.gray, disabled=True)
            async def page_number_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
                pass

            @disnake.ui.button(label="‚û°Ô∏è", style=disnake.ButtonStyle.gray)
            async def next_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
                nonlocal current_page
                if current_page < len(embeds) - 1:
                    current_page += 1
                    await update_message(inter)

            async def on_timeout(self):
                for item in self.children:
                    item.disabled = True
                if self.message:
                    await self.message.edit(view=self)

        view = PaginationView(message=None, timeout=30)
        view.page_number_button.label = f"1 –∏–∑ {len(embeds)}"
        await inter.response.send_message(embed=embeds[current_page], view=view)
        message = await inter.original_message()
        view.message = message
        await message.edit(view=view)


def setup(bot):
    bot.add_cog(Moders(bot))

import config
import disnake
from disnake.ext import commands
import requests



global api
api = "https://api.gtaprovince.tech/api/gateway/v2/online"



class Monitoring(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(
        name=disnake.Localized("monitoring", key="MONITORING_NAME"),
        description=disnake.Localized("Monitoring of servers Province.", key="MONITORING_DESCRIPTION")
    )
    async def monitoring(self, inter):
        await inter.response.defer(with_message="–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤, –æ–Ω–ª–∞–π–Ω–∞ –∏ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
        response = requests.get(api)
        data = response.json()
        
        total_online = 0
        total_max_online = 0

        obt_servers = data["result"]["servers"].get("OBT", {})
        obt_info = []
        for server_data in obt_servers.values():
            obt_info.append(f"{'<:red:1274003670102708234>' if server_data['ping']==0 and server_data['online']==0 else '<:green:1274003689987641476>'} **Province OBT:** {server_data['online']}/{server_data['maxOnline']} ({server_data['ping']} –º—Å)")
            total_online += server_data["online"]
            total_max_online += server_data["maxOnline"]
        obt_info = "\n".join(obt_info)

        rp_servers = data['result']['servers'].get("RP", {})
        rp_info = []
        for server_data in rp_servers.values():
            rp_info.append(f"{'<:red:1274003670102708234>' if server_data['ping']==0 and server_data['online']==0 else '<:green:1274003689987641476>'} **Province RP {server_data['id']}:** {server_data['online']}/{server_data['maxOnline']} ({server_data['ping']} –º—Å)")
            total_online += server_data["online"]
            total_max_online += server_data["maxOnline"]
        rp_info = "\n".join(rp_info)

        peak_online_today = data['result']['max_daily_online']['count']

        embed = disnake.Embed(
            title="MTA PROVINCE ‚Äî –ú–û–ù–ò–¢–û–†–ò–ù–ì", 
            description=f"{rp_info}\n{obt_info}\n\n**–¢–µ–∫—É—â–∏–π –æ–Ω–ª–∞–π–Ω:** {total_online}/{total_max_online}\n**–ü–∏–∫–æ–≤—ã–π –æ–Ω–ª–∞–π–Ω:** {peak_online_today}/{total_max_online}",
            color=config.Colors.TRANSPARENT
        )
        embed.set_image(file=disnake.File("./image/monitoring.png", filename="monitoring.png"))
        await inter.send(embed=embed)



def setup(bot):
    bot.add_cog(Monitoring(bot))

import config
from loguru import logger
from disnake.ext import commands



class Reaction(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_raw_reaction_add(self, payload):
        if payload.guild_id != config.Guilds.MAIN:
            return
        guild = self.bot.get_guild(payload.guild_id)
        channel = self.bot.get_channel(payload.channel_id)
        message = await channel.fetch_message(payload.message_id)
        user = await guild.getch_member(payload.user_id)

        flags = ["üá¶üá©","üá¶üá≤","üá¶üá™","üá¶üá¥","üá¶üá¨","üá¶üáÆ","üá¶üá´","üá¶üá±","üáßüá¶","üá¶üáπ","üáßüáß","üá¶üá∫","üá¶üá∂","üá¶üáΩ","üáßüá©","üá¶üá∑","üá¶üáº","üá¶üá∏","üáßüá™","üáßüá´","üáßüá≠","üáßüá¥","üáßüáÆ","üáßüá≤","üáßüáØ","üáßüá¨","üáßüá±","üáßüá≥","üá®üá¶","üáßüá∑","üáßüáæ","üáßüáø","üáßüá∏","üáßüá∂","üá®üá®","üáßüáπ","üá®üá©","üáßüáª","üáßüáº","üá®üá≠","üá®üá±","üá®üá¨","üá®üá≥","üá®üá´","üá®üáÆ","üá®üá≤","üá®üá¥","üá®üá∑","üá©üá¨","üá®üáº","üá©üá∞","üá®üá∫","üá©üá™","üá®üáΩ","üá®üáæ","üá©üáØ","üá®üáª","üá®üáø","üá™üá∏","üá©üáø","üá™üá™","üá™üá∑","üá©üá≤","üá™üá¨","üá™üá®","üá™üá¶","üá™üá≠","üá™üáπ","üá©üá¥","üá¨üáß","üá´üáÆ","üá´üáØ","üá´üá≤","üá´üá∑","üá¨üá¶","üá™üá∫","üá¨üá©","üá¨üá±","üá¨üáµ","üá¨üá™","üá¨üá≤","üá¨üá≠","üá¨üá≥","üá¨üá´","üá¨üá∂","üá¨üáæ","üá¨üá∑","üá¨üá∫","üá≠üá∞","üá¨üá∏","üá¨üáº","üá¨üáπ","üá≠üá∑","üá≠üá≥","üá≠üáπ","üáÆüá©","üáÆüá≤","üá≠üá∫","üáÆüá∑","üáÆüá∂","üáÆüá™","üáÆüá≥","üáÆüá±","üáÆüá¥","üáØüá™","üáÆüáπ","üáØüá≤","üáØüá¥","üáÆüá∏","üá∞üá™","üá∞üáµ","üá∞üá≤","üá∞üá≥","üá∞üá≠","üáØüáµ","üá±üáß","üá±üá¶","üá∞üá∑","üá∞üáæ","üá∞üáø","üá±üá®","üá∞üáº","üá±üáÆ","üá±üáπ","üá±üáª","üá±üáæ","üá±üá∞","üá±üá∑","üá±üá∫","üá±üá∏","üá≤üá¨","üá≤üá≤","üá≤üá±","üá≤üá¶","üá≤üá´","üá≤üá™","üá≤üá∞","üá≤üá®","üá≤üá≥","üá≤üá©","üá≥üá®","üá≤üáµ","üá≤üá∂","üá≤üá∑","üá≥üá™","üá≤üáπ","üá≤üáª","üá≤üáæ","üá≥üá´","üá≤üá∫","üá≤üáº","üá≤üáΩ","üá≥üá∫","üá≥üáø","üá≥üá¨","üá¥üá≤","üá≥üáÆ","üáµüá¶","üá≥üá±","üá≥üá¥","üá≥üáµ","üáµüá±","üáµüá∏","üáµüá≤","üáµüáπ","üáµüá≥","üáµüá™","üáµüá∑","üáµüá¨","üáµüá≠","üáµüá∞","üá∑üáº","üáµüáº","üá∏üá¶","üáµüáæ","üá∏üáß","üá∂üá¶","üá∑üá™","üá∑üá¥","üá∑üá∏","üá∑üá∫","üá∏üá®","üá∏üá±","üá∏üá≤","üá∏üá©","üá∏üá™","üá∏üá¨","üá∏üá≠","üá∏üáÆ","üá∏üáØ","üá∏üá∞","üá∏üá∏","üá∏üáπ","üá∏üá∏","üá∏üáπ","üá∏üáª","üá∏üáΩ","üá∏üáæ","üá∏üá≥","üá∏üá¥","üá∏üáø","üáπüá≥","üáπüá¨","üáπüá≠","üáπüáØ","üáπüá∞","üáπüá¥","üáπüá±","üáπüá®","üáπüá≤","üáπüá©","üáπüáø","üá∫üá¶","üá∫üá¨","üá∫üá≤","üáπüá∑","üáπüáπ","üá∫üá≥","üá∫üá∏","üáπüáª","üáπüáº","üá∫üáæ","üá≥üá∑","üá≥üá¶","üá≤üáø","üá≤üá∏","üá≤üá≠","üá≤üá¥","üá∞üá¨","üá∞üáÆ","üá≠üá≤","üá¨üá¨","üá¨üáÆ","üáπüá´","üáµüá´","üá´üá¥","üá´üá∞","üá®üá∞","üá®üáµ","üáÆüá®","üá¶üáø","üá¶üá®"]

        for flag in flags:
            if f"{payload.emoji}" == flag:
                await message.remove_reaction(payload.emoji, user)
                return
        return
        


def setup(bot: commands.Bot):
    bot.add_cog(Reaction(bot))


import disnake
import config
from disnake.ext import commands
from disnake import TextInputStyle
from decorator import guild, guild_m



class Solved:
    async def solved(inter: disnake.MessageInteraction):
        thread = inter.channel 
        if thread.parent_id is None:
            return await inter.send("–ù–µ–ª—å–∑—è –∑–∞–∫—Ä—ã—Ç—å –Ω–µ –ø–æ—Å—Ç!", ephemeral=True)
        user_permissions = thread.permissions_for(inter.author)
        if not user_permissions.manage_threads and thread.owner != inter.author:
            await inter.send("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –ª–∏–±–æ –≤—ã –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å –≤–µ—Ç–∫–∏!", ephemeral=True)
            return
        if thread.owner == inter.author:
            text = f"–ê–≤—Ç–æ—Ä {inter.author.mention} (@{inter.author.display_name}) –∑–∞–∫—Ä—ã–ª –≤–µ—Ç–∫—É!"
        else:
            text = f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {inter.author.mention} (@{inter.author.display_name}) –∑–∞–∫—Ä—ã–ª –≤–µ—Ç–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {thread.owner.mention} (@{thread.owner.display_name})!"
        await inter.send(text)
        await thread.edit(archived=True, locked=True)



class SolvedButton(disnake.ui.View):
    def __init__(self): 
        super().__init__(timeout=None)
        
    @disnake.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å –≤–µ—Ç–∫—É", style=disnake.ButtonStyle.red, custom_id="solved_button", disabled=False)
    async def solved_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await Solved.solved(inter)



class SolvedCommand(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
    
    @commands.slash_command(
        name=disnake.Localized("close", key="SOLVED_NAME"),
        description=disnake.Localized("Close the forum thread.", key="SOLVED_DESCRIPTION"),
        guild_ids=[config.Guilds.MAIN]
    )
    async def solved_command(self, inter: disnake.GuildCommandInteraction):
        await Solved.solved(inter)



def setup(bot):
    bot.add_cog(SolvedCommand(bot))

import config
import disnake
import datetime
import sqlite3
from disnake.ext import commands
from decorator import guild, Logger

class Timeout(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(
        name=disnake.Localized("timeout", key="TIMEOUT_NAME"),
        description=disnake.Localized("Give the user a timeout.", key="TIMEOUT_DESCRIPTION"),
        default_member_permissions=disnake.Permissions(mute_members=True),
        guild_ids=[config.Guilds.MAIN]
    )
    async def timeout(
        self, 
        inter: disnake.GuildCommandInteraction,
        member: disnake.Member = commands.Param(name=disnake.Localized("member", key="TIMEOUT_MEMBER_NAME"), description=disnake.Localized("The user who needs to be given a timeout.", key="TIMEOUT_MEMBER_DESCRIPTION")),
        reason: str = commands.Param(name=disnake.Localized("reason", key="TIMEOUT_REASON_NAME")),
        days: int = commands.Param(name=disnake.Localized("days", key="TIMEOUT_DAYS_NAME"), description=disnake.Localized("From 0 to 30 days.", key="TIMEOUT_DAYS_DESCRIPTION"), max_value=28, min_value=0, default=0),
        hours: int = commands.Param(name=disnake.Localized("hours", key="TIMEOUT_HOURS_NAME"), description=disnake.Localized("From 0 to 24 hours.", key="TIMEOUT_HOURS_DESCRIPTION"), max_value=24, min_value=0, default=0),
        minutes: int = commands.Param(name=disnake.Localized("minutes", key="TIMEOUT_MINUTES_NAME"), description=disnake.Localized("From 0 to 60 minutes.", key="TIMEOUT_MINUTES_DESCRIPTION"), max_value=60, min_value=0, default=0),
    ):
        time = datetime.timedelta(days=days, hours=hours, minutes=minutes)
        cool_time = disnake.utils.format_dt(datetime.datetime.now()+time, style="f")
        if member.current_timeout:
            await inter.send(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  {member.mention} (@{member.display_name}) –∏–º–µ–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤—É—é—â–∏–π —Ç–∞–π–º-–∞—É—Ç!", ephemeral=True)
            return        
        await member.timeout(duration=time, reason=reason)
        
        with sqlite3.connect("./locale/database.db") as db:
            cursor = db.cursor()
            cursor.execute(""" INSERT INTO moders (id, mutes) VALUES (?, 1) ON CONFLICT(id) DO UPDATE SET mutes = COALESCE(mutes, 0) + 1 """, [inter.author.id])
            db.commit()

        channel_logs = inter.guild.get_channel(config.Channels.LOGS)
        await channel_logs.send(embed=disnake.Embed(description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.mention} (@{member.display_name}) –≤—ã–¥–∞–Ω —Ç–∞–π–º-–∞—É—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {inter.author.mention} (@{inter.author.display_name}) –Ω–∞ {' '+str(days)+' –¥–Ω.' if days != 0 else ''}{' '+str(hours)+' —á.' if hours != 0 else ''}{' '+str(minutes)+' –º–∏–Ω.' if minutes != 0 else ''}, –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason.lower()}.", color=config.Colors.TRANSPARENT))
        channel_warn = inter.guild.get_channel(config.Channels.WARNINGS)
        await channel_warn.send(f"{member.mention} (@{member.display_name}), –≤–∞–º –≤—ã–¥–∞–Ω —Ç–∞–π–º-–∞—É—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {inter.author.mention} (@{inter.author.display_name}) –¥–æ {cool_time} (–Ω–∞ {' '+str(days)+' –¥–Ω.' if days != 0 else ''}{' '+str(hours)+' —á.' if hours != 0 else ''}{' '+str(minutes)+' –º–∏–Ω.' if minutes != 0 else ''}), –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason.lower()}.")
        await inter.send(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.mention} (@{member.display_name}) –≤—ã–¥–∞–Ω —Ç–∞–π–º-–∞—É—Ç –¥–æ {cool_time} (–Ω–∞ {' '+str(days)+' –¥–Ω.' if days != 0 else ''}{' '+str(hours)+' —á.' if hours != 0 else ''}{' '+str(minutes)+' –º–∏–Ω.' if minutes != 0 else ''})!", ephemeral=True)

    

    @commands.slash_command(
        name=disnake.Localized("untimeout", key="UNTIMEOUT_NAME"),
        description=disnake.Localized("Remove the user's timeout.", key="UNTIMEOUT_DESCRIPTION"),
        default_member_permissions=disnake.Permissions(mute_members=True),
        guild_ids=[config.Guilds.MAIN]
    )
    async def untimeout(
        self, 
        inter: disnake.GuildCommandInteraction,
        member: disnake.Member = commands.Param(name=disnake.Localized("member", key="UNTIMEOUT_MEMBER_NAME"), description=disnake.Localized("The user to take the timeout from.", key="UNTIMEOUT_MEMBER_DESCRIPTION"))
    ):
        if not member.current_timeout:
            await inter.send(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  {member.mention} –Ω–µ—Ç —Ç–∞–π–º-–∞—É—Ç–∞!", ephemeral=True)
            return
        await member.timeout(until=None, reason=None)
        
        channel_logs = inter.guild.get_channel(config.Channels.LOGS)
        await channel_logs.send(embed=disnake.Embed(description=f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention} (@{member.display_name}) –∏–∑—ä—è—Ç —Ç–∞–π–º-–∞—É—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {inter.author.mention} (@{inter.author.display_name}).", color=config.Colors.TRANSPARENT))
        channel_warn = inter.guild.get_channel(config.Channels.WARNINGS)
        await channel_warn.send(f"{member.mention} (@{member.display_name}), —É –≤–∞—Å –∏–∑—ä—è—Ç —Ç–∞–π–º-–∞—É—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {inter.author.mention} (@{inter.author.display_name}).")
        await inter.send(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention} (@{member.display_name}) –∏–∑—ä—è—Ç —Ç–∞–π–º-–∞—É—Ç!")

def setup(bot):
    bot.add_cog(Timeout(bot))


import config
import disnake
import sqlite3
from disnake.ext import commands
from decorator import guild_m



class Verify(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
    
    @commands.Cog.listener("on_message")
    async def on_message_detect(self, message: disnake.Message):
        if message.channel.id != config.Channels.VERIFY:
            return
        if "_" not in message.content or message.author.id == self.bot.user.id:
            if message.author.id == self.bot.user.id:
                return
            await message.delete()
            return
        else:
            channel = message.guild.get_channel(config.Channels.VERIFY)
            message_split = message.content.split("_")
            imya = message_split[0].title()
            familiya = message_split[1].title()

            with sqlite3.connect("./locale/database.db") as db:
                cursor = db.cursor()

            if cursor.execute(""" SELECT name FROM names WHERE name = ? """, [imya]).fetchone() is not None:
                if cursor.execute(""" SELECT id FROM blacklist WHERE id = ? """, [int(message.author.id)]).fetchone() is not None:
                
                    manual_change = ManualChange(message, nick=f"{imya}_{familiya}")
                    await manual_change.manual_change(channel)

                    db.commit()
                    
                    return
                auto_change = AutoChange(message, nick=f"{imya}_{familiya}")
                await auto_change.auto_change(channel)
            else:
                manual_change = ManualChange(message, nick=f"{imya}_{familiya}")
                await manual_change.manual_change(channel)
            
        db.commit()



class AutoChange:
    def __init__(self, message, nick):
        self.message = message
        self.nick = nick

    async def auto_change(self, channel):
        role = self.message.guild.get_role(config.Roles.VERIFY)
        if role not in self.message.author.roles:
            await self.message.author.add_roles(role)
        await self.message.author.edit(nick=self.nick)
        await self.message.add_reaction("ü§ù")
        channel_tech = self.message.guild.get_channel(config.Channels.VERIFY_TECH)
        embed=disnake.Embed(
            title="", 
            description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.message.author.mention} (@{self.message.author.display_name}) —Å–º–µ–Ω–µ–Ω –Ω–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ {self.nick}!",
            color=config.Colors.TRANSPARENT
        )
        await channel_tech.send(embed=embed, view=AutoVerifyButton(self.message, self.nick))



class ManualChange:
    def __init__(self, message, nick):
        self.message = message
        self.nick = nick

    async def manual_change(self, channel):
        await self.message.add_reaction("üëé")
        try:
            if self.message.thread == None:
                thread = await self.message.create_thread(name=f"–î–µ–π—Å—Ç–≤–∏—è ({self.message.id})", auto_archive_duration=10080)
            else: 
                thread = self.message.thread
            await thread.send(f"–ó–∞—è–≤–∫–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!")
        except: pass
        channel_tech = self.message.guild.get_channel(config.Channels.VERIFY_TECH)
        embed=disnake.Embed(
            title="", 
            description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.message.author.mention} (@{self.message.author.display_name}) –Ω–µ —Å–º–µ–Ω–µ–Ω –Ω–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ {self.nick}!",
            color=config.Colors.TRANSPARENT
        )
        await channel_tech.send(embed=embed, view=ManualVerifyButton(self.message, self.nick))



class ManualVerifyButton(disnake.ui.View):
    def __init__(self, message, nick):
        self.message = message
        self.nick = nick
        super().__init__(timeout=None)
        self.message_link = disnake.ui.Button(label="–°–æ–æ–±—â–µ–Ω–∏–µ", url=self.message.jump_url)
        self.add_item(self.message_link)
        
    @disnake.ui.button(label="–°–º–µ–Ω–∏—Ç—å", style=disnake.ButtonStyle.green, custom_id="change")
    async def change(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.response.send_modal(modal=ModalVerify(self.message, self.nick))
    @disnake.ui.button(label="–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∏–∫", style=disnake.ButtonStyle.red, custom_id="invalid")
    async def invalid(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.response.defer()
        try:
            if self.message.thread == None:
                thread = await self.message.create_thread(name=f"–î–µ–π—Å—Ç–≤–∏—è ({self.message.id})", auto_archive_duration=10080)
            else: 
                thread = self.message.thread
            await thread.send(f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {inter.author.mention} (@{inter.author.display_name}) –∏ –Ω–µ —Å–æ–±–ª—é–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ, —Ç–∞–∫–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏–±–æ –∑–∞—è–≤–∫–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–µ –≤–µ—Ä–Ω–æ! –°–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –≤–Ω–æ–≤—å, –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–µ—Ä–∂–∫–∏!")
            try: await thread.remove_user(inter.author)
            except: pass
        except: pass
        
        with sqlite3.connect("./locale/database.db") as db:
            cursor = db.cursor()
            cursor.execute(""" INSERT INTO moders (id, joins) VALUES (?, 1) ON CONFLICT(id) DO UPDATE SET joins = COALESCE(joins, 0) + 1 """, [inter.author.id])
            db.commit()

        channel_logs = inter.guild.get_channel(config.Channels.LOGS)
        await channel_logs.send(embed=disnake.Embed(description=f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {inter.author.mention} (@{inter.author.display_name}) –æ–±—Ä–∞–±–æ—Ç–∞–ª [–∑–∞—è–≤–∫—É]({inter.message.jump_url}) –æ —Å–º–µ–Ω–µ –Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.message.author.mention} (@{self.message.author.display_name}).", color=config.Colors.TRANSPARENT))
        components=[
            disnake.ui.Button(label=f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–∏–∫", style=disnake.ButtonStyle.grey, custom_id="status", disabled=True),
            disnake.ui.Button(label=f"–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º: {inter.author.display_name}", style=disnake.ButtonStyle.grey, custom_id="moder", disabled=True),
            disnake.ui.Button(label="–°–æ–æ–±—â–µ–Ω–∏–µ", url=self.message.jump_url)
        ]
        await inter.edit_original_response(components=components)



class AutoVerifyButton(disnake.ui.View):
    def __init__(self, message, nick):
        self.message = message
        self.member = message.author
        self.nick = nick
        super().__init__(timeout=None)
        self.message_link = disnake.ui.Button(label="–°–æ–æ–±—â–µ–Ω–∏–µ", url=self.message.jump_url)
        self.add_item(self.message_link)
        
    @disnake.ui.button(label="–û–±—Ä–∞–±–æ—Ç–∞—Ç—å", style=disnake.ButtonStyle.blurple, custom_id="processing")
    async def processing(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        
        with sqlite3.connect("./locale/database.db") as db:
            cursor = db.cursor()
            cursor.execute(""" INSERT INTO moders (id, joins) VALUES (?, 1) ON CONFLICT(id) DO UPDATE SET joins = COALESCE(joins, 0) + 1 """, [inter.author.id])
            db.commit()

        channel_logs = inter.guild.get_channel(config.Channels.LOGS)
        await channel_logs.send(embed=disnake.Embed(description=f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {inter.author.mention} (@{inter.author.display_name}) –æ–±—Ä–∞–±–æ—Ç–∞–ª [–∑–∞—è–≤–∫—É]({inter.message.jump_url}) –æ —Å–º–µ–Ω–µ –Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.member.mention} (@{self.member.display_name}).", color=config.Colors.TRANSPARENT))
        components=[
            disnake.ui.Button(label=f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ", style=disnake.ButtonStyle.grey, custom_id="succes", disabled=True),
            disnake.ui.Button(label=f"–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º: {inter.author.display_name}", style=disnake.ButtonStyle.grey, custom_id="moder", disabled=True),
            disnake.ui.Button(label="–°–æ–æ–±—â–µ–Ω–∏–µ", url=self.message.jump_url)
        ]
        await inter.response.edit_message(components=components)
        # await inter.send(f"–ó–∞—è–≤–∫–∞ {inter.message.jump_url} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!")
        pass
    @disnake.ui.button(label="–°–º–µ–Ω–∏—Ç—å", style=disnake.ButtonStyle.green, custom_id="change")
    async def change(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.response.send_modal(modal=ModalVerify(self.message, self.nick))
    @disnake.ui.button(label="–°–±—Ä–æ—Å–∏—Ç—å", style=disnake.ButtonStyle.red, custom_id="reset")
    async def reset(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.response.defer()
        role = inter.guild.get_role(config.Roles.VERIFY)
        try:
            if role in self.member.roles:
                await self.member.remove_roles(role)
            await self.member.edit(nick=self.member.name)
        except: pass
        try: 
            await self.message.clear_reactions()
            await self.message.add_reaction("üëé")
            if self.message.thread == None:
                thread = await self.message.create_thread(name=f"–î–µ–π—Å—Ç–≤–∏—è ({self.message.id})", auto_archive_duration=10080)
            else: 
                thread = self.message.thread
            await thread.send(f"–ù–∏–∫ —Å–±—Ä–æ—à–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {inter.author.mention} (@{inter.author.display_name}) –¥–æ: {self.member.name}! –°–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –≤–Ω–æ–≤—å, –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–µ—Ä–∂–∫–∏!")
            try: await thread.remove_user(inter.author)
            except: pass
        except: pass
        
        with sqlite3.connect("./locale/database.db") as db:
            cursor = db.cursor()
            cursor.execute(""" INSERT INTO moders (id, joins) VALUES (?, 1) ON CONFLICT(id) DO UPDATE SET joins = COALESCE(joins, 0) + 1 """, [inter.author.id])
            cursor.execute(""" INSERT INTO blacklist(id) SELECT ? WHERE NOT EXISTS (SELECT 1 FROM blacklist WHERE id = ?) """, [self.member.id])
            db.commit()

        channel_logs = inter.guild.get_channel(config.Channels.LOGS)
        await channel_logs.send(embed=disnake.Embed(description=f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {inter.author.mention} (@{inter.author.display_name}) –æ–±—Ä–∞–±–æ—Ç–∞–ª [–∑–∞—è–≤–∫—É]({inter.message.jump_url}) –æ —Å–º–µ–Ω–µ –Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.member.mention} (@{self.member.display_name}).", color=config.Colors.TRANSPARENT))
        components=[
            disnake.ui.Button(label=f"–°–±—Ä–æ—à–µ–Ω –¥–æ: {self.member.name}", style=disnake.ButtonStyle.grey, custom_id="succes", disabled=True),
            disnake.ui.Button(label=f"–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º: {inter.author.display_name}", style=disnake.ButtonStyle.grey, custom_id="moder", disabled=True),
            disnake.ui.Button(label="–°–æ–æ–±—â–µ–Ω–∏–µ", url=self.message.jump_url)
        ]
        await inter.edit_original_response(components=components)



class ModalVerify(disnake.ui.Modal):
    def __init__(self, message, nick) -> None:
        self.nick = nick
        self.message = message
        self.member = message.author

        components = [
            disnake.ui.TextInput(
                label="–ù–∏–∫–Ω–µ–π–º",
                placeholder="–ò–º—è_–§–∞–º–∏–ª–∏—è",
                custom_id="nick",
                style=disnake.TextInputStyle.short,
                value=f"{self.nick}",
                required=True,
            ),
        ]
        super().__init__(title=f"–°–º–µ–Ω–∏—Ç—å –Ω–∏–∫ {self.member.display_name}", custom_id="modal_verify", components=components)

    async def callback(self, inter: disnake.ModalInteraction) -> None:
        nick = inter.text_values["nick"]
        role = inter.guild.get_role(config.Roles.VERIFY)
        try: 
            if role not in self.member.roles:
                await self.member.add_roles(role)
            await self.member.edit(nick=nick)
        except: pass
        message = self.message
        try: 
            await message.clear_reactions()
            await message.add_reaction("ü§ù")
            if message.thread == None:
                thread = await message.create_thread(name=f"–î–µ–π—Å—Ç–≤–∏—è ({message.id})", auto_archive_duration=10080)
            else: 
                thread = message.thread
            await thread.send(f"–ù–∏–∫ —Å–º–µ–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {inter.author.mention} (@{inter.author.display_name}) –Ω–∞: {nick}!")
            try: await thread.remove_user(inter.author)
            except: pass
        except: pass
        components=[
            disnake.ui.Button(label=f"–°–º–µ–Ω–µ–Ω –Ω–∞: {nick}", style=disnake.ButtonStyle.grey, custom_id="succes", disabled=True),
            disnake.ui.Button(label=f"–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º: {inter.author.display_name}", style=disnake.ButtonStyle.grey, custom_id="moder", disabled=True),
            disnake.ui.Button(label="–°–æ–æ–±—â–µ–Ω–∏–µ", url=message.jump_url)
        ]
        nick = nick.split("_")
        imya = nick[0].title()
        
        with sqlite3.connect("./locale/database.db") as db:
            cursor = db.cursor()
            cursor.execute(""" INSERT INTO moders (id, joins) VALUES (?, 1) ON CONFLICT(id) DO UPDATE SET joins = COALESCE(joins, 0) + 1 """, [inter.author.id])
            cursor.execute(""" INSERT INTO names(name) SELECT ? WHERE NOT EXISTS (SELECT 1 FROM names WHERE name = ?) """, [imya])
            db.commit()

        channel_logs = inter.guild.get_channel(config.Channels.LOGS)
        await channel_logs.send(embed=disnake.Embed(description=f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {inter.author.mention} (@{inter.author.display_name}) –æ–±—Ä–∞–±–æ—Ç–∞–ª [–∑–∞—è–≤–∫—É]({inter.message.jump_url}) –æ —Å–º–µ–Ω–µ –Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.member.mention} (@{self.member.display_name}).", color=config.Colors.TRANSPARENT))
        await inter.response.edit_message(components=components)
        # await inter.send(f"–ó–∞—è–≤–∫–∞ {inter.message.jump_url} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!")
        pass


def setup(bot):
    bot.add_cog(Verify(bot))
